@model Sakura.AspNetCore.IPagedList<AlexWilkinson.Models.Blog>

@using Sakura.AspNetCore;
@using Microsoft.AspNetCore.Identity
@using AlexWilkinson.Models

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "Blog";
}

@using (Html.BeginForm("Index", "Blog", FormMethod.Get, new {@class="form-inline" }))
{
    <div class="row container-fluid">
        <div class="col-xs-2"><h1 class="highligher">@ViewData["Title"]</h1></div>
        
        <div class="col-xs-offset-6 blog-search-bar input-group">
            <p>
                @Html.TextBox("SearchString", ViewBag.CurrentFilter as string,
                    new {@class="form-control", placeholder = "Search Posts" })
                <span class="input-group-btn">
                    <input type="submit" class="btn btn-default" value="Search" />
                </span>
            </p>
        </div>
    </div>
}



@foreach (var item in Model)
{

    var contentBlurb = item.Body;
    var subLen = 200;
    if(contentBlurb.Length > subLen)
    {
        contentBlurb = contentBlurb.Substring(0, subLen);
        contentBlurb += "...";
    }
    <div class="main-blog-container col-xs-offset1 col-xs-5">
        <div class="blog-list-header ">
            <div>
                <h3 class="highligher">@Html.DisplayFor(modelItem => item.Title) </h3>
            </div>
        </div>
        <div class="col-xs-4  blog-publish-time">
            <p><i class="fa fa-calendar-o"></i> On: @Html.DisplayFor(modelItem => item.Published)</p>

        </div>
        <div class="col-xs-8  blog-author text-left">
            <p><i class="fa  fa-group"></i> By: @Html.DisplayFor(modelItem => item.Author)</p>

        </div>

        <div class="blog-list-image">
            @{
                var imgLocation = "../images/blog";
                if (item.CoverImg == null)
                {
                    <img src="@imgLocation/default.jpg" class="img-responsive" />
                }
                else
                {
                    <img src="@imgLocation/@item.CoverImg" class="img-responsive" />
                }
            }

        </div>

        <div class="blog-list-body">
            @Html.DisplayFor(modelItem => contentBlurb)
        </div>
        <div class="blog-list-contiune">
            <a asp-action="Details" asp-route-id="@item.ID" class="blog-btn-style">Contiune Reading</a>
        </div>

        @if (SignInManager.IsSignedIn(User))
        {
            <div class="blog-admin-controls">
                <a asp-action="Edit" asp-route-id="@item.ID"> Edit</a> |
                <a asp-action="Delete" asp-route-id="@item.ID">Delete</a>
            </div>
        }
    </div>






}


<!--Pagination logic to generate the dynamic pagation-->
@if (Model.TotalPage != 1)
{

    <nav aria-label="Page navigation">
        @{ 
            var previousPage = Model.PageIndex;
            var nextPage = Model.PageIndex;
            if (previousPage != 1)
            {
                previousPage -= 1;

            }
            if (Model.PageIndex != Model.TotalPage)
            {
                nextPage += 1;

            }
        }
        <ul class="pagination">
            @if (Model.PageIndex != 1)
            {
                <li>
                    <a href="?page=@previousPage" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>
            }

            @for (int i = 1; i < Model.TotalPage + 1; i++)
            {
                <li class=@(Model.PageIndex == i ? "active" : "") ><a href="?page=@i">@i</a></li>
            }

            @if (Model.PageIndex != Model.TotalPage)
            {
                <li>
                    <a href="?page=@nextPage" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            }

        </ul>

    </nav>
    <div id="pagination-total-count">
        Page @(Model.TotalPage < Model.PageIndex ? 0 : Model.PageIndex) of @Model.TotalPage
    </div>
}

